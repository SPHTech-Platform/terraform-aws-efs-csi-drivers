# Default values for aws-efs-csi-driver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  repository: ${image_repository}
  tag: ${image_tag}
  pullPolicy: IfNotPresent

sidecars:
  livenessProbe:
    image:
      tag: ${liveness_probe_image_tag}
  nodeDriverRegistrar:
    image:
      tag: ${node_driver_registrar_image_tag}
  csiProvisioner:
    image:
      tag: ${external_provisioner_image_tag}

controller:
  create: true
  resources: ${controller_resources}
  serviceAccount:
    create: true
    name: ${controller_service_account_name}
    annotations: ${controller_service_account_annotations}
    ## Enable if EKS IAM for SA is used
    #  eks.amazonaws.com/role-arn: arn:aws:iam::111122223333:role/efs-csi-role
  podDisruptionBudget:
    enabled: true
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: "topology.kubernetes.io/zone"
      whenUnsatisfiable: DoNotSchedule

node:
  resources: ${node_resources}
  serviceAccount:
    create: true
    name: ${node_service_account_name}
    annotations: ${node_service_account_annotations}
    ## Enable if EKS IAM for SA is used
    #  eks.amazonaws.com/role-arn: arn:aws:iam::111122223333:role/efs-csi-role

storageClasses: ${storage_classes}
# Add StorageClass resources like:
# - name: efs-sc
#   annotations:
#     # Use that annotation if you want this to your default storageclass
#     storageclass.kubernetes.io/is-default-class: "true"
#   mountOptions:
#   - tls
#   parameters:
#     provisioningMode: efs-ap
#     fileSystemId: fs-1122aabb
#     directoryPerms: "700"
#     gidRangeStart: "1000"
#     gidRangeEnd: "2000"
#     basePath: "/dynamic_provisioning"
#   reclaimPolicy: Delete
#   volumeBindingMode: Immediate

# Specifies wether to use helm hooks to apply the CSI driver
useHelmHooksForCSIDriver: ${enable_helm_hooks_for_csi_driver}
